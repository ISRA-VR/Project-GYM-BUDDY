Este txt describe la estructura del proyecto basada en el patrón MVC (Model-View-Controller) 
pensada para PHP puro (sin frameworks).

## ¿Qué es MVC?

MVC separa la aplicación en tres capas:

- Model: lógica y acceso a datos.
- View: plantillas y presentación (HTML/PHP).
- Controller: recibe peticiones, consulta modelos y devuelve vistas.

## Estructura y propósito de las carpetas

- `app/`
	- `app/Controllers/` — Controladores PHP que manejan requests y preparan datos para las vistas. 
    Ej: `AuthController.php`, `HomeController.php`, `WorkoutController.php`.

- `config/`
	- Archivos de configuración de la aplicación: `config.php`, settings de DB, etc.

- `database/`
	- Migraciones y seeds (si usas base de datos). Ej: `database/migrations/`.

- `docs/`
	- Documentación del proyecto, decisiones arquitectónicas y guías para contribuir.

- `Models/`
	— Clases que representan datos y encapsulan acceso a la fuente de datos (DB, archivos JSON). 
    Ej: `User.php`, `Workout.php`.

- `public/` (Document Root)
	- Archivos accesibles desde el navegador.
	- `public/index.php` — Front controller (o página de login).
	- `public/partials/` — `header.php`, `footer.php` (partials compartidos).
	- `public/assets/css/`, `public/assets/js/`, `public/assets/img/` — CSS, JS e imágenes.
	- Páginas estáticas que incluyan partials: `public/workouts.php`, `public/about.php`.

- `Views`
	— Plantillas PHP que generan HTML (sin lógica de negocio). 
    Ej: `login.php`, `dashboard.php`.

- Archivos raíz útiles
	- `.gitignore` — reglas para ignorar archivos.
	- `README.md` — este archivo.

## Empezar rápidamente (Laragon)

1. En Laragon, apunta el Document Root a `c:\laragon\www\Project-GYM-BUDDY\public`.
2. Crea `public/index.php` (front controller) y partials en `public/partials/`.
3. Crea `.env` local a partir de `.env.example` y ajusta `config/`.
4. (Opcional) Desde la terminal, en `public/` ejecuta:

powershell
php -S localhost:8000
